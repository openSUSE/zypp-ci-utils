#! /usr/bin/python3
import sys, os, re
import subprocess

#======================================================================

class Ansi:
    OFF = "\033[0m"
    R   = "\033[0;31m"
    G   = "\033[0;32m"
    B   = "\033[0;34m"
    C   = "\033[0;36m"
    M   = "\033[0;35m"
    Y   = "\033[0;33m"

def eprint( *args, **kwargs ):
    print( *args, file=sys.stderr, **kwargs )

def _print( ansi, *args, **kwargs ):
    print( ansi, end='', **kwargs )
    print( *args, end='', **kwargs )
    print( Ansi.OFF, **kwargs )

def Rprint( *args, **kwargs ): _print( Ansi.R, *args, file=sys.stdout, **kwargs )
def Gprint( *args, **kwargs ): _print( Ansi.G, *args, file=sys.stdout, **kwargs )
def Bprint( *args, **kwargs ): _print( Ansi.B, *args, file=sys.stdout, **kwargs )
def Cprint( *args, **kwargs ): _print( Ansi.C, *args, file=sys.stdout, **kwargs )
def Mprint( *args, **kwargs ): _print( Ansi.M, *args, file=sys.stdout, **kwargs )
def Yprint( *args, **kwargs ): _print( Ansi.Y, *args, file=sys.stdout, **kwargs )

def Reprint( *args, **kwargs ): _print( Ansi.R, *args, file=sys.stderr, **kwargs )
def Geprint( *args, **kwargs ): _print( Ansi.G, *args, file=sys.stderr, **kwargs )
def Beprint( *args, **kwargs ): _print( Ansi.B, *args, file=sys.stderr, **kwargs )
def Ceprint( *args, **kwargs ): _print( Ansi.C, *args, file=sys.stderr, **kwargs )
def Meprint( *args, **kwargs ): _print( Ansi.M, *args, file=sys.stderr, **kwargs )
def Yeprint( *args, **kwargs ): _print( Ansi.Y, *args, file=sys.stderr, **kwargs )

def DBG( *args ): return #Ceprint( "###", *args )

#======================================================================

class PkgDef( object ):
    ''' Package properties from a .repo file to build the spec file '''
    def __init__( self, pdef, allscripts=False, istrigger=False ):
        d = re.split( r'\s+', pdef )
        self.n = d[0]
        self.v = d[1]
        self.r = d[2]
        self.prv = []
        self.req = []
        self.obs = []
        self.con = []
        self.product = None     # Name of the product in case of building a -release package
        self.allscripts = allscripts
        self.istrigger  = istrigger

    @property
    def isProduct( self ): return self.product is not None

    @property
    def nvr( self ):
        return f'{self.n}-{self.v}-{self.r}'

    def __str__( self ):
        return f'PKG({self.nvr})'

class RepoDef( object ):
    ''' Collect PkgDefs from a .repo file '''
    def __init__( self, rfile ):
        self.rfile = rfile
        self.rname = os.path.basename( rfile )
        self.pdefs = []

    def __str__( self ):
        return f'REPO({self.rname}:{len(self.pdefs)})'

#======================================================================

def parseRepoDef( rfile ):
    '''
    allscripts:	1   # packages below will log script execution
    istrigger:  1   # packages below will install a trigger file
    Pkg:	advance-toolchain-at14.0-release	14.0	6
        Prd:	ibm-power-advance-toolchain

    Pkg:	advance-toolchain-at14.0-release	14.0	7
        Prd:	advance-toolchain-at14.0
        Obs:	product:ibm-power-advance-toolchain = 14.0
    '''
    Bprint( "PARSE", rfile )
    allscripts = False
    istrigger  = False
    rdef = RepoDef( rfile )
    with open( rfile, 'r' ) as f:
        pdef = None
        for l in f:
            words = re.split( r'\s+', l.strip(), maxsplit=1 )
            DBG( words )
            if len(words) == 0:
                continue    # empty line
            if len(words) == 1 and words[0] == '':
                continue    # white line
            if words[0][0] == '#':
                continue    # comment line

            typ, dat = words

            if typ == 'Pkg:':
                if pdef is not None:
                    rdef.pdefs.append( pdef )
                pdef = PkgDef( dat, allscripts=allscripts, istrigger=istrigger )
            elif typ == 'Prd:':
                pdef.product = dat
            elif typ == 'Prv:':
                pdef.prv.append( dat )
            elif typ == 'Req:':
                pdef.req.append( dat )
            elif typ == 'Obs:':
                pdef.obs.append( dat )
            elif typ == 'Con:':
                pdef.con.append( dat )

            elif typ == 'allscripts:':
                allscripts = bool(int(dat))
            elif typ == 'istrigger:':
                istrigger = bool(int(dat))

            elif typ != '':
                raise Exception( 'Unknown line type', typ )
        else:
            if pdef is not None:
                rdef.pdefs.append( pdef )
    DBG( rdef )
    return rdef

#======================================================================

def writeln( f, l ):
    f.write( l )
    f.write( '\n' )

def buildPkg( pdef, rdir="", allScripts=True, isTrigger=True ):
    ''' Build .spec file from "pdef" and build rpm into "rdir". '''
    Bprint( "BUILD", rdir, pdef )
    sfile = os.path.join( rdir, "SPECS" )
    if not os.path.isdir( sfile ): os.mkdir( sfile )
    sfile = os.path.join( sfile, f"{pdef.nvr}.spec" )
    with open( sfile, 'w' ) as f:
        isProduct  = pdef.product is not None
        allScripts = pdef.allscripts
        isTrigger  = pdef.istrigger

        writeln( f, '%undefine vendor' )
        writeln( f, f'Name:           {pdef.n}' )
        writeln( f, f'Version:        {pdef.v}' )
        writeln( f, f'Release:        {pdef.r}' )
        writeln( f, 'Provides:        test42' )
        if isProduct:
            writeln( f, f'Provides:        product() = {pdef.product}' )
            writeln( f, f'Provides:        product({pdef.product}) = {pdef.v}-{pdef.r}' )
        for t,d in [ ('Provides', 'prv'), ('Requires', 'req'), ('Obsoletes', 'obs'), ('Conflicts', 'con') ]:
            d = getattr( pdef, d )
            for l in d:
                writeln( f, f'{t}:        {l}' )
        writeln( f, 'License:        nolicense' )
        writeln( f, 'Summary:        nosummary' )
        writeln( f, 'Vendor:         novendor' )
        writeln( f, 'BuildArch:      noarch' )
        writeln( f, 'BuildRoot:      /tmp/%{name}-%{version}-build' )
        writeln( f, '%description' )
        writeln( f, 'nodescription' )

        writeln( f, '' )
        writeln( f, '%install' )
        writeln( f, 'rm -rf $RPM_BUILD_ROOT' )
        writeln( f, 'mkdir -p $RPM_BUILD_ROOT' )
        if isProduct:
            writeln( f,  'mkdir -p $RPM_BUILD_ROOT/etc/products.d/' )
            writeln( f, f'cat <<EOF >$RPM_BUILD_ROOT/etc/products.d/{pdef.product}.prod' )
            writeln( f,  '<?xml version="1.0" encoding="UTF-8"?>' )
            writeln( f,  '<product schemeversion="0">' )
            writeln( f,  '  <vendor>novendor</vendor>' )
            writeln( f, f'  <name>{pdef.product}</name>' )
            writeln( f, f'  <version>{pdef.v}</version>' )
            writeln( f, f'  <release>{pdef.r}</release>' )
            writeln( f,  '  <arch>noarch</arch>' )
            writeln( f, f'  <summary>Product:{pdef.product}-{pdef.v}-{pdef.r}</summary>' )
            writeln( f,  '</product>' )
            writeln( f,  'EOF' )
        if isTrigger:
            writeln( f,  'mkdir -p $RPM_BUILD_ROOT/tmp/ptest.repo.triggers' )
            writeln( f,  'touch    $RPM_BUILD_ROOT/tmp/ptest.repo.triggers/%{name}-%{version}-%{release}.trigger' )

        if allScripts:
            for script in ("pretrans", "pre", "preun", "post", "postun", "posttrans"):
                writeln( f,  '' )
                writeln( f, f'%{script}' )
                writeln( f, f'echo "[SCRIPT> %name-%version-%release %{script} $@"' )
                writeln( f, f'if [ -e /tmp/ptest.repo.errors/%name-%version-%release.{script} ]; then exit 42; fi' )

        if allScripts:
            for script in ("filetriggerin", "filetriggerun", "filetriggerpostun", "transfiletriggerin", "transfiletriggerun", "transfiletriggerpostun" ):
                writeln( f,  '' )
                writeln( f, f'%{script} -- /tmp/ptest.repo.triggers' )
                writeln( f, f'echo "[TRIGGR> %name-%version-%release %{script} $@"' )
                writeln( f, 'while read L; do echo  "       > $L"; done' )
                writeln( f, f'if [ -e /tmp/ptest.repo.errors/%name-%version-%release.{script} ]; then exit 42; fi' )

        writeln( f, '' )
        writeln( f, '%files' )
        if isProduct:
            writeln( f, f'/etc/products.d/{pdef.product}.prod' )
        if isTrigger:
            writeln( f,  '/tmp/ptest.repo.triggers/%{name}-%{version}-%{release}.trigger' )

    # --rmspec
    cmd = ["rpmbuild", "-D", f"_rpmdir {rdir}", "--quiet", "-bb", sfile]
    ret = subprocess.run( cmd )
    DBG( "===== rpmbuild", ret.args, "=>", ret.returncode )
    if ret.returncode != 0:
        Rprint( "===== rpmbuild", ret.args, "=>", ret.returncode )
        raise Exception( 'Rpmbild error', pdef )

def buildRepo( rdef ):
    ''' Build packages from "rdef" into "[RPMS/]{rdef.rfile}.d". '''
    stem = os.path.join( os.path.dirname( rdef.rfile ), "RPMS" )
    if os.path.isdir( stem ):
        rdir = os.path.join( stem, f"{rdef.rname}.d" )
    else:
        rdir = f"{rdef.rfile}.d"
    Bprint( "BUILD", rdir, rdef )

    DBG( "CLEAN rdir", rdir )
    if os.path.isdir( rdir ):
        subprocess.run( ["sh", "-c", f"rm -f {rdir}/SPECS/*.spec {rdir}/*/*.rpm"] )
    else:
        os.mkdir( rdir )

    for pdef in rdef.pdefs:
        buildPkg( pdef, rdir )

#======================================================================

def main():
    '''
    Build .spec files and packages from a ptest.repo description
    into ptest.repo.d directory.
    - All packages provide: test42 (zypper -n rm test42)
    - allScripts: All triggers refer to /tmp/ptest.repo.triggers/
    - allScripts: If a file /tmp/ptest.repo.errors/%name-%version-%release.{script} exists, the script execution fails
    '''
    argv = sys.argv[1:]
    rfile = argv[0] if len(argv) else "ptest.repo"
    rdef = parseRepoDef( rfile )
    buildRepo( rdef )

if __name__ == '__main__':
    main()
